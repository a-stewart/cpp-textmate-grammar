- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: S
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: int
  scopesBegin:
    - meta.body.struct
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: x
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: some raw string literal
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'y'
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: z
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: hello
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: S
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: int
  scopesBegin:
    - meta.body.struct
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: x1
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: some raw string literal
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: x2
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: some raw string literal
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: x3
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: f
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: g
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: some raw string literal
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'y'
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: z
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: hello
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
